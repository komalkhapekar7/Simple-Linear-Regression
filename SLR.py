# -*- coding: utf-8 -*-
"""SkLearn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CAtHSNSWLa64H2_cT0GWtEC55cUi3CsA

## Advertising dataset

#Simple Linear Regression
we will build linear regression to predict sales using independent variable.
"""

#SLR
import warnings
warnings.filterwarnings('ignore')

import pandas as pd
adv = pd.read_csv("/content/advertising2 (1).csv")
adv.head()

adv.shape

adv.head()

adv.info()

adv.describe()

adv.dtypes

"""Visualising the data"""

import matplotlib.pyplot as plt
import seaborn as sns

sns.pairplot(adv,x_vars=['TV','Newspaper','Radio'],y_vars='Sales',size=4,aspect=1,kind='scatter')
plt.show()

sns.heatmap(adv.corr(),cmap="Blues",annot=True)
plt.show()
#heatmap-light colot for negative corr and dark for positive corr
#Tv is more correleated with sales, so its our indep varsns

fig=plt.figure(figsize=(10,4))
sns.distplot(adv['TV']);

"""### Sales = c+mx TV|y=c+m1.TV
##we need to find c and m which are model coefficient or parameters
"""

X=adv['TV']
y=adv['Sales']

from sklearn.model_selection import train_test_split

# Assuming you have defined X and y somewhere earlier in your code
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=100)

X_train.head()

y_train.head()

y_test.head()

X_test.head()

from sklearn.linear_model import LinearRegression
import numpy as np

import numpy as np
X_train = np.array(X_train).reshape(-1, 1)
X_test = np.array(X_test).reshape(-1, 1)
y_test = np.array(y_test).reshape(-1, 1)
y_train = np.array(y_train).reshape(-1, 1)
lm= LinearRegression()
lm.fit(X_train,y_train)

ypred=lm.predict(X_test)
ypred

ypred=lm.predict(y_test)
ypred

from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error

print("Mean_Squared_Error:",mean_squared_error(y_test, ypred))
print("Mean_absolute_error:",mean_absolute_error(y_test, ypred))
print("R_Squared:",r2_score(y_test, ypred)*100)

np.sqrt(mean_squared_error(y_test, ypred))

np.sqrt(mean_squared_error(X_test, ypred))